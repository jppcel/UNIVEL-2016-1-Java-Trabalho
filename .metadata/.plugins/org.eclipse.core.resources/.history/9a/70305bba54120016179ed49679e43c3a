package me.polles;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.h2.jdbc.JdbcSQLException;

public class SQLGenI extends SqlGen {


	@Override
	protected String getCreateTable(Connection con, Object obj) {
		// TODO Auto-generated method stub
		// Pega a Classe do Objeto
		Class<?> Cla = obj.getClass();
		try{
			// Cria a variavel com o StringBuilder e a string com o nome da tabela
			StringBuilder StBu = new StringBuilder();
			String TableName;
			
			// Faz a verificacao para decidir o nome da tabela
			if(Cla.isAnnotationPresent(Tabela.class)){
			
				Tabela annotationTable = Cla.getAnnotation(Tabela.class);
				TableName = annotationTable.value();
			
			}else{
			
				TableName = Cla.getSimpleName().toUpperCase();
			
			}
			
			// Comeca de fato a criacao do SQL para gerar o SQL
			StBu.append("CREATE TABLE ").append(TableName).append(" (");
			Field[] attr = Cla.getDeclaredFields();

			StringBuilder pk = new StringBuilder();
			int ColumnSize = 0;
			// For para varrer todos os atributos da classe
			for(int i = 0; i < attr.length; i++){
				// Pega o atributo
				Field fie = attr[i];
				
				// Cria variaveis de nome e tipo da coluna
				String ColumnName;
				String ColumnType;

				// Pega o Tipo da Coluna
				Class<?> AttrType = fie.getType();
				
				// Faz toda a verificacao para saber o nome da coluna, seu tipo e se a mesma é PK
				if(fie.isAnnotationPresent(Coluna.class)){
					Coluna annotationColumn = fie.getAnnotation(Coluna.class);
					if(annotationColumn.nome().isEmpty()){
						ColumnName = fie.getName().toUpperCase();
					}else{
						ColumnName = annotationColumn.nome();
					}
					
					if(annotationColumn.pk()){
						if(annotationColumn.nome().isEmpty()){
							pk.append(fie.getName().toUpperCase());
						}else{
							pk.append(annotationColumn.nome());
						}
					}
					if(AttrType.equals(String.class)){
						ColumnSize = annotationColumn.tamanho();
					}
				}else{
					ColumnName = fie.getName().toUpperCase();
				}
				
				// Decide o tipo e o tamanho da coluna
				if(AttrType.equals(String.class)){
					ColumnType = "VARCHAR(" + ColumnSize + ")";
				}else if(AttrType.equals(EstadoCivil.class)){
					ColumnType = "INT";
				}else if(AttrType.equals(int.class)){
					ColumnType = "INT";
				}else{
					ColumnType = "UNKNOWN";
				}
				
				// Caso tenha mais atribuitos, ele coloca uma virgula para separar
				if(i > 0){
					StBu.append(",");
				}
				
				// Coloca as informacoes no SQL
				StBu.append(ColumnName).append(" ").append(ColumnType);
			}
			// Informa quais sao as PKs e finaliza o SQL
			StBu.append(", PRIMARY KEY(").append(pk.toString()).append(")");
			StBu.append(");");
			// Guarda o SQL em uma variável e mostra na tela qual o SQL.
			String Return = StBu.toString();
			System.out.println("SQL GENERATED: "+ Return);
			// Retorna o SQL...
			return Return;
		}catch(SecurityException e){
			throw new RuntimeException(e);
		}
	}

	@Override
	protected String getDropTable(Connection con, Object obj) {
		// TODO Auto-generated method stub
		Class<?> Cla = obj.getClass();
		StringBuilder StBu = new StringBuilder();
		
		String TableName;

		if(Cla.isAnnotationPresent(Tabela.class)){
			Tabela annotationTable = Cla.getAnnotation(Tabela.class);
			TableName = annotationTable.value();
		}else{
			TableName = Cla.getSimpleName().toUpperCase();
		}
		
		StBu.append("DROP TABLE ").append(TableName).append(" IF EXISTS;");
		String Return = StBu.toString();
		System.out.println("SQL GENERATED: "+Return);
		return Return;
	}

	@Override
	protected PreparedStatement getSqlInsert(Connection con, Object obj) {
		// TODO Auto-generated method stub
		Class<?> Cla = obj.getClass();
		StringBuilder StBu = new StringBuilder();
		
		String TableName;
		if(Cla.isAnnotationPresent(Tabela.class)){
			
			Tabela annotationTable = Cla.getAnnotation(Tabela.class);
			TableName = annotationTable.value();
		
		}else{
		
			TableName = Cla.getSimpleName().toUpperCase();
		
		}
		
		StBu.append("INSERT INTO ").append(TableName).append(" (");
		
		Field[] attr = Cla.getDeclaredFields();
		for(int i = 0; i < attr.length; i++){
			Field fie = attr[i];
			
			String ColumnName;
			if(fie.isAnnotationPresent(Coluna.class)){
				Coluna ColumnAnnotation = fie.getAnnotation(Coluna.class);
				
				if(ColumnAnnotation.nome().isEmpty()){
					ColumnName = fie.getName().toUpperCase();
				}else{
					ColumnName = ColumnAnnotation.nome();
				}
				
			}else{
				ColumnName = fie.getName().toUpperCase();
			}
			
			if(i > 0){
				StBu.append(", ");
			}
			
			StBu.append(ColumnName);
		}
		StBu.append(") VALUES (");
		for(int i = 0; i < attr.length; i++){
			if(i > 0){
				StBu.append(", ");
			}
			StBu.append("?");
		}
		StBu.append(");");
		String SQL = StBu.toString();
		System.out.println(SQL);
				
		try {
			PreparedStatement PSIn = con.prepareStatement(SQL);
			for(int i = 0; i < attr.length; i++){
				Field fie = attr[i];
				
				fie.setAccessible(true);
				if(fie.getType().equals(String.class)){
					PSIn.setString(i+1, String.valueOf(fie.get(obj)));
				}else if(fie.getType().equals(int.class)){
					PSIn.setInt(i+1, fie.getInt(obj));
				}else if(fie.getType().equals(EstadoCivil.class)){
					String estadoCivil = String.valueOf(fie.get(obj));
					EstadoCivil EC = EstadoCivil.valueOf(estadoCivil);
					PSIn.setInt(i+1, EC.getID());
				} else {
					throw new RuntimeException("Unsupported type.");
				}
			}
			return PSIn;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	@Override
	protected PreparedStatement getSqlSelectAll(Connection con, Object obj) {
		// TODO Auto-generated method stub
		Class<?> Cla = obj.getClass();
		StringBuilder StBu = new StringBuilder();
		
		String TableName;
		if(Cla.isAnnotationPresent(Tabela.class)){
			
			Tabela annotationTable = Cla.getAnnotation(Tabela.class);
			TableName = annotationTable.value();
		
		}else{
		
			TableName = Cla.getSimpleName().toUpperCase();
		
		}

		StBu.append("SELECT ");
		Field[] attr = Cla.getDeclaredFields();
		for(int i=0; i < attr.length; i++){
			Field fie = attr[i];
			String ColumnName;
			if(fie.isAnnotationPresent(Coluna.class)){
				Coluna ColumnAnnotation = fie.getAnnotation(Coluna.class);
				
				if(ColumnAnnotation.nome().isEmpty()){
					ColumnName = fie.getName().toUpperCase();
				}else{
					ColumnName = ColumnAnnotation.nome();
				}
				
			}else{
				ColumnName = fie.getName().toUpperCase();
			}
			StBu.append(ColumnName).append(" ");
			if(i+1 < attr.length){
				StBu.append(", ");
			}
		}
		StBu.append(" FROM ").append(TableName).append(";");
		String SQL = StBu.toString();
		System.out.println(SQL);
		try {
			PreparedStatement PSAll = con.prepareStatement(SQL);
			PSAll.execute();
			return PSAll;
		} catch (JdbcSQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return null;
	}

	@Override
	protected PreparedStatement getSqlSelectById(Connection con, Object obj) {
		// TODO Auto-generated method stub
		Class<?> Cla = obj.getClass();
		StringBuilder StBu = new StringBuilder();
		
		String TableName;
		
		if(Cla.isAnnotationPresent(Tabela.class)){
			
			Tabela annotationTable = Cla.getAnnotation(Tabela.class);
			TableName = annotationTable.value();
		
		}else{
		
			TableName = Cla.getSimpleName().toUpperCase();
		
		}

		StBu.append("SELECT ");
		Field[] attr = Cla.getDeclaredFields();
		for(int i=0; i < attr.length; i++){
			Field fie = attr[i];
			String ColumnName;
			if(fie.isAnnotationPresent(Coluna.class)){
				Coluna ColumnAnnotation = fie.getAnnotation(Coluna.class);
				
				if(ColumnAnnotation.nome().isEmpty()){
					ColumnName = fie.getName().toUpperCase();
				}else{
					ColumnName = ColumnAnnotation.nome();
				}
				
			}else{
				ColumnName = fie.getName().toUpperCase();
			}
			StBu.append(ColumnName).append(" ");
			if(i+1 < attr.length){
				StBu.append(", ");
			}
		}		
		StBu.append(" FROM ").append(TableName).append(" WHERE ");

		
		int found = 0, id = 0;
		
		
		for(int i = 0; i < attr.length && found == 0; i++){
			Field fie = attr[i];
			
			String ColumnName = null;
			
			Coluna annotationColumn = fie.getAnnotation(Coluna.class);
			if(fie.isAnnotationPresent(Coluna.class)){		
				ColumnName = annotationColumn.nome();		
				if(annotationColumn.pk()){				
					fie.setAccessible(true);
					if(annotationColumn.nome().isEmpty()){
						ColumnName = fie.getName().toUpperCase();
					}else{
						ColumnName = annotationColumn.nome();
					}
					found++;
					try {
						id = fie.getInt(obj);
					} catch (IllegalArgumentException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IllegalAccessException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
			if(found == 1){
				StBu.append(ColumnName).append(" = ?");				
			}
		}
		
		StBu.append(";");
		String SQL = StBu.toString();
		System.out.println(SQL);
		

		PreparedStatement PSSea = null;
		try {
			PSSea = con.prepareStatement(SQL);
			PSSea.setInt(1, id);
			
			PSSea.executeQuery();
			
			return PSSea;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return null;
	}

	@Override
	protected PreparedStatement getSqlUpdateById(Connection con, Object obj) {
//		return null;
//		 TODO Auto-generated method stub
		
		Class<?> Cla = obj.getClass();
		StringBuilder StBu = new StringBuilder();
		
		String TableName;
		if(Cla.isAnnotationPresent(Tabela.class)){
			
			Tabela annotationTable = Cla.getAnnotation(Tabela.class);
			TableName = annotationTable.value();
		
		}else{
		
			TableName = Cla.getSimpleName().toUpperCase();
		
		}
		
		StBu.append("UPDATE ").append(TableName).append(" SET ");
		
		String PK = null;
		int PKValue = 0, j = 0;
		
		Field[] attr = Cla.getDeclaredFields();
		for(int i = 0; i < attr.length; i++){
			Field fie = attr[i];
			
			String ColumnName;
			if(fie.isAnnotationPresent(Coluna.class)){
				Coluna ColumnAnnotation = fie.getAnnotation(Coluna.class);
				
				if(ColumnAnnotation.nome().isEmpty()){
					ColumnName = fie.getName().toUpperCase();
				}else{
					ColumnName = ColumnAnnotation.nome();
				}
				if(ColumnAnnotation.pk()){
					fie.setAccessible(true);
					PK = ColumnName;
					try {
						PKValue = fie.getInt(obj);
					} catch (IllegalArgumentException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IllegalAccessException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}else{
					j++;
				}
				
			}else{
				ColumnName = fie.getName().toUpperCase();
			}
			
			if(i > 0 && i+1 == attr.length){
				StBu.append(", ");
			}
			
			StBu.append(ColumnName).append(" = ?");
		}
		StBu.append(" WHERE ").append(PK).append(" = ?;");
		String SQL = StBu.toString();
		System.out.println(SQL);
				
		try {
			PreparedStatement PSIn = con.prepareStatement(SQL);
			for(int J = 0, i = 0; J < j; ){
				Field fie = attr[i];
				
				String ColumnName;
				if(fie.isAnnotationPresent(Coluna.class)){
					Coluna ColumnAnnotation = fie.getAnnotation(Coluna.class);
					
					if(!ColumnAnnotation.pk()){
						ColumnName = fie.getName().toUpperCase();
				
						fie.setAccessible(true);
						if(fie.getType().equals(String.class)){
							PSIn.setString(i+1, String.valueOf(fie.get(obj)));
						}else if(fie.getType().equals(int.class)){
							PSIn.setInt(i+1, fie.getInt(obj));
						}else if(fie.getType().equals(EstadoCivil.class)){
							String estadoCivil = String.valueOf(fie.get(obj));
							EstadoCivil EC = EstadoCivil.valueOf(estadoCivil);
							PSIn.setInt(i+1, EC.getID());
						} else {
						J++;

						}
					}
					i++;
				}
				PSIn.setInt(j, PKValue);
				PSIn.executeUpdate();
				return PSIn;
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	@Override
	protected PreparedStatement getSqlDeleteById(Connection con, Object obj) {
		// TODO Auto-generated method stub
		Class<?> Cla = obj.getClass();
		StringBuilder StBu = new StringBuilder();
		
		String TableName;
		
		if(Cla.isAnnotationPresent(Tabela.class)){
			
			Tabela annotationTable = Cla.getAnnotation(Tabela.class);
			TableName = annotationTable.value();
		
		}else{
		
			TableName = Cla.getSimpleName().toUpperCase();
		
		}
		
		StBu.append("DELETE FROM ").append(TableName).append(" WHERE ");

		Field[] attr = Cla.getDeclaredFields();
		
		int found = 0;
		
		Field pk = null;
		
		for(int i = 0; i < attr.length && found == 0; i++){
			Field fie = attr[i];
			
			String ColumnName;
			
			Coluna annotationColumn = fie.getAnnotation(Coluna.class);

			ColumnName = annotationColumn.nome();
			if(fie.isAnnotationPresent(Coluna.class)){				
				if(annotationColumn.pk()){					
					if(annotationColumn.nome().isEmpty()){
						ColumnName = fie.getName().toUpperCase();
					}else{
						ColumnName = annotationColumn.nome();
					}
					found++;
				}
			}
			if(found == 1){
				
				StBu.append(ColumnName).append(" = ?");
				pk = fie;
				
				
			}
		}
		
		StBu.append(";");
		String SQL = StBu.toString();
		System.out.println(SQL);
		

		PreparedStatement PSDel = null;
		try {
			PSDel = con.prepareStatement(SQL);
			PSDel.setInt(0, pk.getInt(obj));
			return PSDel;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return PSDel;
	}

}
